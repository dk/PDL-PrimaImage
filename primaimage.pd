use strict;
use warnings;

$::PDLPACK = 'NONE';

pp_addpm({At=>'Top'},'');

pp_addhdr(<<HEADER);

#undef WORD
#include <apricot.h>
#include <Image.h>

PImage_vmt CImage;

static void
repad( Byte * source, Byte * dest, int h, int srcLineSize, int dstLineSize)
{
   int bsc = srcLineSize > dstLineSize ? dstLineSize : srcLineSize;
   for ( ; h > 0; h--, source += srcLineSize, dest += dstLineSize)
      memcpy(dest, source, bsc); 
}


static void
prima_image_convert( SV * imagesv, void * data, int w, int h, int image2piddle, int z, int mpixel, int type)
{
   int bsz = (type & imBPP)/8;
   PImage image;
   if ( !(( image = ( PImage) gimme_the_mate( imagesv)) && kind_of(( Handle) image, CImage)))
      croak("Invalid image object passed");
   if ( !mpixel) {
      h = w;
      w = z;
      z = 1;
   }
   if ( image2piddle) {
      repad(image-> data, ( Byte *) data, h, image-> lineSize, bsz * w * z);
   } else {
      if ( w * z != image-> w || h != image-> h || image-> type != type)
         image-> self-> create_empty(( Handle) image, w * z, h, type);
      repad(( Byte *) data, image-> data, h, bsz * w * z, image-> lineSize); 
      if ( z == 2) {
         if ( type != imFloat && type != imComplex)
            image-> self-> reset(( Handle) image, imFloat, nil, 0);
         image-> type = imComplexNumber | imGrayScale | ( image-> type & imBPP) * 2;
         image-> w /= 2;
      } else if ( z == 3) {
         if ( type != imByte)
            image-> self-> reset(( Handle) image, imByte, nil, 0);
         image-> type = imRGB;
         image-> w /= 3;
      }
      image-> self-> update_change((Handle)image);
   }
}


#define byte_prima_image_convert(a,b,c,d,e,f,g) prima_image_convert(a,b,c,d,e,f,g,imByte)
#define short_prima_image_convert(a,b,c,d,e,f,g) prima_image_convert(a,b,c,d,e,f,g,imShort)
#define long_prima_image_convert(a,b,c,d,e,f,g) prima_image_convert(a,b,c,d,e,f,g,imLong)
#define float_prima_image_convert(a,b,c,d,e,f,g) prima_image_convert(a,b,c,d,e,f,g,imFloat)
#define double_prima_image_convert(a,b,c,d,e,f,g) prima_image_convert(a,b,c,d,e,f,g,imDouble)
HEADER


pp_add_boot(<<'BOOT');
PRIMA_VERSION_BOOTCHECK;
CImage = (PImage_vmt)gimme_the_vmt( "Prima::Image");
BOOT

pp_def('image2piddle',
        Pars => 'data(z,w,h)',
        OtherPars => 'SV * imagesv; int image2piddle; int mpixel',
        GenericTypes => ['B','S','L','F','D'],
        Code => <<CODE,
\$TBSLFD(byte,short,long,float,double)_prima_image_convert(
    \$COMP(imagesv),\$P(data),\$SIZE(w),\$SIZE(h),
    \$COMP(image2piddle),\$SIZE(z),\$COMP(mpixel));
CODE
);

pp_done();
